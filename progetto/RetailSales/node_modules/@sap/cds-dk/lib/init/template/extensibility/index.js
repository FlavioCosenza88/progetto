const cds = require('../../../cds')
const { exists } = cds.utils
const { join } = require('path')
const { readProject } = require('../../util/projectReader')
const { mergeJSON } = require('../../util/merge')
const { OPTION_MULTITENANCY } = require('../../constants')

module.exports = class ExtensibilityTemplate extends require('../templateBase') {


  getDependencies() {
    return exists('pom.xml') ? [OPTION_MULTITENANCY] : [] // REVISIT: Remove this dependency
  }

  static hasFacet(env) {
    return !!env.requires?.extensibility
  }

  async run() {
    const projectDescriptor = await readProject(this.options)
    const { configFile } = projectDescriptor.cap
    await mergeJSON(configFile, join(__dirname, 'files', 'package.json.hbs'), projectDescriptor)
    await this.runDependentMerging()
  }

  async runDependentMerging() {
    const projectDescriptor = await readProject(this.options)
    const { hasXsuaa, hasApprouter } = projectDescriptor.cap
    if (hasXsuaa) {
      await mergeJSON(
        'xs-security.json',
        join(__dirname, 'files', 'xs-security.json.hbs'),
        projectDescriptor,
        {
          additions: [{
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.cds.ExtensionDeveloper' }],
          }, {
            in: 'scopes',
            where: [{ property: 'name', isEqualTo: '$XSAPPNAME.cds.UIFlexDeveloper' }],
          }, {
            in: 'role-templates',
            where: [{ property: 'name', isEqualTo: 'ExtensionDeveloper' }],
          }]
        }
      )
    }
    if (hasApprouter) {
      const ApprouterTemplate = require(`../approuter`)
      const approuterTemplate = new ApprouterTemplate(this.generator)
      await approuterTemplate.runDependentMerging()
    }
  }
}
